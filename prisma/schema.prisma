// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id        String @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   email     String @unique
//   image     String?
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
  
//   conversationIds String[] @db.ObjectId
//   conversations Conversation[] @relation(fields: [conversationIds], references: [id])

//   messagesIds String[] @db.ObjectId
//   messages Message[] 
// }

// model Conversation {
//   id            String @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt     DateTime @default(now())
//   lastMessageAt DateTime @default(now())

//   userIds String[] @db.ObjectId
//   users User[] @relation(fields: [userIds], references: [id])

//   messagesIds String[] @db.ObjectId
//   messages Message[]
// }

// model Message {
//   id         String @id @default(auto()) @map("_id") @db.ObjectId
//   text       String?
//   image      String?
//   createdAt  DateTime @default(now())

//   userId     String @db.ObjectId
//   user       User @relation(fields: [userId], references: [id])

//   conversationId String @db.ObjectId
//   conversation Conversation @relation(fields: [conversationId], references: [id])
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  email     String   @unique
  image     String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversations Conversation[] // Define many-to-many relation without array-based foreign keys
  messages      Message[]
}

model Conversation {
  id            String   @id @default(uuid()) @map("_id")
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())

  users         User[] // Many-to-many relation with User
  messages      Message[]
}

model Message {
  id            String   @id @default(uuid()) @map("_id")
  text          String?
  image         String?
  createdAt     DateTime @default(now())

  userId        String   // Foreign key to User
  user          User     @relation(fields: [userId], references: [id])

  conversationId String   // Foreign key to Conversation
  conversation  Conversation @relation(fields: [conversationId], references: [id])
}
